// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package userDB

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    dn
) VALUES (
    ?
)
`

func (q *Queries) CreateUser(ctx context.Context, dn string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, dn)
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM users WHERE api_key = ?
`

func (q *Queries) DeleteAPIKey(ctx context.Context, apiKey string) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKey, apiKey)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT api_key FROM users WHERE dn = ?
`

func (q *Queries) GetAPIKey(ctx context.Context, dn string) (string, error) {
	row := q.db.QueryRowContext(ctx, getAPIKey, dn)
	var api_key string
	err := row.Scan(&api_key)
	return api_key, err
}

const getUserIDByAPIKey = `-- name: GetUserIDByAPIKey :one
SELECT id FROM users WHERE api_key = ?
`

func (q *Queries) GetUserIDByAPIKey(ctx context.Context, apiKey string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByAPIKey, apiKey)
	var id int64
	err := row.Scan(&id)
	return id, err
}
